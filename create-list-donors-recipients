(define-type-alias InstitutionName (String 30 ascii))

(define-type-alias Id Uint)

(define-non-fungible-token institution-nft Id)

(define-map donor-list  
 ((id Id))  
 ((institution-name InstitutionName)   
  (institution-principal Principal)))
  
(define-map lookup 
 ((institution-name InstitutionName)) 
 ((id Id)))

(define-data-var last-id Id u0)

(define-public (alive) 
  (ok "Ready to receive donations"))

(define-read-only (get-last-id) 
  (var-get last-id))

(define-public (register 
                 (institution-name InstitutionName)
                 (institution-principal Principal))  
  (let ((id (+ (get-last-id) u1)))     
    (var-set last-id id) 
    (map-insert donor-list {id} 
      {institution-name, institution-principal})       
    (map-insert lookup {institution-name} {id})      
    (unwrap! (nft-mint? institution-nft id tx-sender) (err 1))                 
    (ok id)))

(define-private (get-id-by-name? 
                 (institution-name InstitutionName))  
 (get id (map-get? lookup {institution-name})))   

(define-read-only (get-data-by-name? (institution-name InstitutionName))  
  (map-get? donor-list 
   {id (unwrap! (get-id-by-name? institution-name) none)}))

(define-read-only (get-owner? 
                   (institution-name InstitutionName)) 
 (nft-get-owner? institution-nft 
  (unwrap! (get-id-by-name? institution-name) none)))

(define-public (update  
                (institution-name InstitutionName) 
                (institution-principal Principal))  
  (if (is-eq tx-sender (unwrap-panic (get-owner? institution-name))) 
    (ok (map-set donor-list 
          {id (unwrap! (get-id-by-name? institution-name) (err u1))} 
          {institution-name, institution-principal}))    
    (err u2)))

(define-public (transfer 
                (institution-name InstitutionName) 
                (recipient Principal)) 
 (if (is-eq tx-sender (unwrap-panic (get-owner? institution-name)))
   (nft-transfer? institution-nft (unwrap! (get-id-by-name? institution-name) (err u1)) 
     tx-sender recipient)    
  (err u2)))


;;
